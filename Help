 public sealed class SwaggerAddEnumForQuestionType : ISchemaFilter
    {
        public void Apply(Schema schema, SchemaFilterContext context)
        {
            if (context.SystemType.IsEquivalentTo(typeof(SearchParametersCustomer)))
            {
                schema.Properties["questionType"]
                    .Enum = Enumeration.GetAll<QuestionTypeEnumeration>()
                            .Select(s => s.DisplayName)
                            .ToList<object>();
            }
        }
    }
    
    using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Swashbuckle.AspNetCore.Swagger;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;

namespace visionBDRP.Configuration
{
    public sealed class SwaggerConfigurator : ICustomStartup
    {
        public int Order => 1;
        private readonly IConfiguration _configuration;

        public SwaggerConfigurator(IConfiguration configuration)
        {
            _configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
        }

        public void ConfigureServices(IServiceCollection services)
        {
            services.AddSwaggerGen(c =>
            {
                var contact = new Contact();
                var license = new License();
                _configuration.Bind("SwaggerSettings:Contact", contact);
                _configuration.Bind("SwaggerSettings:License", license);

                c.SwaggerDoc(
                    _configuration["SwaggerSettings:Version"],
                    new Info
                    {
                        Title = _configuration["SwaggerSettings:Name"],
                        Description = _configuration["SwaggerSettings:Description"],
                        TermsOfService = _configuration["SwaggerSettings:TermsOfService"],
                        Contact = contact,
                        License = license,
                        Version = _configuration["SwaggerSettings:Version"]
                    });

                c.AddSecurityDefinition(
                    "x-jws-signature",
                    new ApiKeyScheme
                    {
                        In = "Header",
                        Description = "JWT Authorization header using the Bearer scheme",
                        Name = "x-jws-signature",
                        Type = "apiKey"
                    });

                c.AddSecurityRequirement(new Dictionary<string, IEnumerable<string>> { { "x-jws-signature", new string[] { } } });


                // Set the comments path for the Swagger JSON and UI.
                c.IncludeXmlComments(Path.Combine(AppContext.BaseDirectory, $"{typeof(Program).GetTypeInfo().Assembly.GetName().Name}.xml"));

                // Speaks itself.
                c.DescribeAllEnumsAsStrings();

                c.DocumentFilter<SwaggerHideProblemDetailsFromDocument>();
                c.DocumentFilter<SwaggerReplaceVersionWithExactValueInPath>();
                c.OperationFilter<SwaggerRemoveVersionFromParameter>();
                c.SchemaFilter<SwaggerAddEnumForLegalBasis>();
                c.SchemaFilter<SwaggerAddEnumForQuestionType>();
                c.SchemaFilter<SwaggerAddEnumForProductType>();
                c.SchemaFilter<SwaggerConvertEnumerationTypeToList>();
            });
        }

        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            app.UseSwagger(options =>
            {
                options.PreSerializeFilters.Add((document, request) =>
                {
                    document.Paths = document.Paths.ToDictionary(path => path.Key.ToLowerInvariant(), path => path.Value);
                });
            });
        }
    }
}


using Intesa.SanPaolo.Servitia.Practices;
using Swashbuckle.AspNetCore.Swagger;
using Swashbuckle.AspNetCore.SwaggerGen;
using System.ComponentModel;
using System.Linq;
using System.Reflection;

namespace visionBDRP.Configuration
{
    public sealed class SwaggerConvertEnumerationTypeToList : ISchemaFilter
    {
        public void Apply(Schema schema, SchemaFilterContext context)
        {
            if (!context.SystemType.IsEquivalentTo(typeof(Enumeration)) && !context.SystemType.IsSubclassOf(typeof(Enumeration)))
                return;

            schema.Type = "string";
            schema.Enum = Enumeration.GetAll(context.SystemType)
                            .OfType<Enumeration>()
                            .Select(s => s.DisplayName)
                            .ToList<object>();

            schema.Description = context.SystemType
                                    .GetCustomAttribute<DescriptionAttribute>()
                                    ?.Description
                                ?? context.SchemaRegistry.Definitions
                                    .Where(w => w.Key != context.SystemType.Name)
                                    .SelectMany(s => s.Value.Properties)
                                    .FirstOrDefault(f => f.Key == context.SystemType.Name)
                                    .Value?.Description;

            schema.Properties?.Clear();
        }
    }
}



  public sealed class SwaggerRemoveVersionFromParameter : IOperationFilter
    {
        public void Apply(Operation operation, OperationFilterContext context)
        {
            var versionParameter = operation.Parameters?.SingleOrDefault(p => p.Name == "version").ToOptional();
            foreach (var parameter in versionParameter)
                operation.Parameters.Remove(parameter);
        }
    }
    
    using Swashbuckle.AspNetCore.Swagger;
using Swashbuckle.AspNetCore.SwaggerGen;
using System.Linq;

namespace visionBDRP.Configuration
{
    public sealed class SwaggerReplaceVersionWithExactValueInPath : IDocumentFilter
    {
        public void Apply(SwaggerDocument swaggerDoc, DocumentFilterContext context)
        {
            swaggerDoc.Paths = swaggerDoc.Paths
                .ToDictionary(
                    path => path.Key.Replace("v{version}", swaggerDoc.Info.Version),
                    path => path.Value);
        }
    }
}


using Microsoft.AspNetCore.Mvc.ApiExplorer;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using System;
using System.Linq;
using visionBDRP.Extensions;
using visionBDRP.Services;
using visionBDRP.Services.Models;

namespace visionBDRP.ConfigurationOptions
{
    public sealed class ConfigureApiExplorerOptions : IConfigureOptions<ApiExplorerOptions>
    {
        private readonly IServiceScopeFactory _serviceScopeFactory;

        public ConfigureApiExplorerOptions(IServiceScopeFactory serviceScopeFactory)
        {
            _serviceScopeFactory = serviceScopeFactory ?? throw new ArgumentNullException(nameof(serviceScopeFactory));
        }

        public void Configure(ApiExplorerOptions options)
        {
            using (var scope = _serviceScopeFactory.CreateScope())
            {
                var provider = scope.ServiceProvider;
                var dataService = provider.GetRequiredService<IDataService>();

                var application = dataService.GetData<ApplicationInfo>(SqlQueryProvider.ApplicationGet, 1);
                if (!application.Any() || application.Single().ApplicationId != 1)
                    throw new InvalidOperationException($"Application parameters not found.");

                var version = application.Single().Version.Split('.').Select(int.Parse).ToArray();

                options.GroupNameFormat = "'v'VVV";
                options.SubstituteApiVersionInUrl = true;
                options.AssumeDefaultVersionWhenUnspecified = false;
                options.DefaultApiVersion = new Microsoft.AspNetCore.Mvc.ApiVersion(version[0], version[1]);
            }
        }
    }
}


using Microsoft.AspNetCore.Mvc.Versioning;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using System;
using System.Linq;
using visionBDRP.Controllers;
using visionBDRP.Errors;
using visionBDRP.Services;
using visionBDRP.Services.Models;

namespace visionBDRP.ConfigurationOptions
{
    public sealed class ConfigureApiVersioningOptions : IConfigureOptions<ApiVersioningOptions>
    {
        private readonly IServiceScopeFactory _serviceScopeFactory;

        public ConfigureApiVersioningOptions(IServiceScopeFactory serviceScopeFactory)
        {
            _serviceScopeFactory = serviceScopeFactory ?? throw new ArgumentNullException(nameof(serviceScopeFactory));
        }

        public void Configure(ApiVersioningOptions options)
        {
            using (var scope = _serviceScopeFactory.CreateScope())
            {
                var provider = scope.ServiceProvider;
                var dataService = provider.GetRequiredService<IDataService>();

                var application = dataService.GetData<ApplicationInfo>(SqlQueryProvider.ApplicationGet, 1);
                if (!application.Any() || application.Single().ApplicationId != 1)
                    throw new InvalidOperationException($"Application parameters not found.");

                var version = application.Single().Version.Split('.').Select(int.Parse).ToArray();

                options.ReportApiVersions = true;
                options.ApiVersionReader = new UrlSegmentApiVersionReader();
                options.AssumeDefaultVersionWhenUnspecified = false;
                options.UseApiBehavior = false;
                options.DefaultApiVersion = new Microsoft.AspNetCore.Mvc.ApiVersion(version[0], version[1]);
                options.ErrorResponses = new CustomDefaultErrorResponseProvider($"{version[0]}.{version[1]}");

                options.Conventions
                    .Controller<SearchController>()
                        .HasApiVersion(new Microsoft.AspNetCore.Mvc.ApiVersion(version[0], version[1]));
            }
        }
    }
}


using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Versioning;
using System;

namespace visionBDRP.Errors
{
    public sealed class CustomDefaultErrorResponseProvider : DefaultErrorResponseProvider
    {
        private readonly string _version;
        public CustomDefaultErrorResponseProvider(string version)
        {
            _version = version ?? throw new ArgumentNullException(nameof(version));
        }
        public override IActionResult CreateResponse(ErrorResponseContext context)
        {
            throw new VisionException(
                    VisionExceptionEnumeration.INVALID_VERSION,
                    default,
                    $"Expected : {_version}");
        }
    }
}


using Intesa.SanPaolo.Servitia.Practices;
using Intesa.SanPaolo.Servitia.Practices.Security;
using Microsoft.AspNetCore.Http;
using System;
using System.Threading.Tasks;
using visionBDRP.Models.Responses;
using visionBDRP.Security;

namespace visionBDRP.MiddleWares
{
    public class VisionSetResponseHeaderHandlerMiddelWare : IMiddleware
    {
        private readonly ICorrelationContext _correlationContext;
        private readonly ISecuredValuesProvider _securedValuesProvider;
        private readonly ITokenEngine _tokenEngine;

        public VisionSetResponseHeaderHandlerMiddelWare(
            ICorrelationContext correlationContext,
            ISecuredValuesProvider securedValuesProvider,
            ITokenEngine tokenEngine)
        {
            _correlationContext = correlationContext ?? throw new ArgumentNullException(nameof(correlationContext));
            _securedValuesProvider = securedValuesProvider ?? throw new ArgumentNullException(nameof(securedValuesProvider));
            _tokenEngine = tokenEngine ?? throw new ArgumentNullException(nameof(tokenEngine));
        }

        public virtual async Task InvokeAsync(HttpContext context, RequestDelegate next)
        {
            context.Response.OnStarting(() =>
            {
                if (context.Response.StatusCode == StatusCodes.Status200OK
                    || context.Response.StatusCode == StatusCodes.Status201Created)
                {
                    var response = _correlationContext["Response"];
                    var content = string.Empty;
                    if (response.OfType<SearchCustomerResponse>() is SearchCustomerResponse customerResponse)
                        content = _tokenEngine.BuildToken(customerResponse);
                    else if (response.OfType<SearchProductResponse>() is SearchProductResponse productResponse)
                        content = _tokenEngine.BuildToken(productResponse);

                    if (content != string.Empty)
                    {
                        var securedvalues = _securedValuesProvider
                            .GetSecuredValues<JwtSecuredValues>(SecuredValuesEnumeration.JwtSecuredValues)
                                ?? throw new InvalidOperationException($"Secured Jwt information unavailable.");

                        context.Response.Headers.Add("x-jws-signature", $"{securedvalues.Jwt_Header}..{content.Split('.')[2]}");
                    }
                }
                return Task.CompletedTask;
            });

            await next(context);
        }
    }
}

using System;
using System.ComponentModel.DataAnnotations;

namespace visionBDRP.Validation
{
    [AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)]
    public class StringLengthHtmlTagsValidationAttribute : StringLengthAttribute
    {
        public StringLengthHtmlTagsValidationAttribute(int maximumLength) : base(maximumLength) { }

        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            if (value is string stringValue)
            {
                var validCharArray = Array.FindAll(
                    stringValue.ToCharArray(),
                    c => (char.IsLetterOrDigit(c)
                        || char.IsWhiteSpace(c)
                        || c == '-'));

                value = new string(validCharArray);

                validationContext
                    .ObjectType
                    .GetProperty(validationContext.MemberName)
                    .SetValue(validationContext.ObjectInstance, value);
            }

            return base.IsValid(value, validationContext);
        }
    }
}


using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Serialization;
using System.Collections.Generic;
using System.Linq;
using visionBDRP.Configuration;
using visionBDRP.Extensions;
using visionBDRP.MiddleWares;
using visionBDRP.Validation;

namespace visionBDRP
{
    public class Startup
    {
        private readonly IEnumerable<ICustomStartup> _dependencyConfigurators;
        public Startup(IConfiguration configuration, IEnumerable<ICustomStartup> dependencyConfigurators)
        {
            Configuration = configuration;
            _dependencyConfigurators = dependencyConfigurators;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddRouting(options =>
            {
                options.ConstraintMap.Add("string", typeof(StringConstraint));
                options.LowercaseUrls = true;
            });

            services.AddMvc(options =>
                {
                    options.RespectBrowserAcceptHeader = true;
                    options.ReturnHttpNotAcceptable = true;
                    options.Filters.Add<ModelValidationAttribute>();
                })
                .AddJsonOptions(options =>
                {
                    options.SerializerSettings.Formatting = Formatting.Indented;
                    options.SerializerSettings.TypeNameHandling = TypeNameHandling.None;
                    options.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();
                    options.SerializerSettings.Converters.Add(new EnumerationJsonConverter());
                    options.SerializerSettings.Converters.Add(new StringEnumConverter());
                    options.SerializerSettings.DefaultValueHandling = DefaultValueHandling.Include;
                    options.SerializerSettings.NullValueHandling = NullValueHandling.Ignore;
                    options.SerializerSettings.DateFormatString = "yyyy'-'MM'-'dd";
                    options.SerializerSettings.DateFormatHandling = DateFormatHandling.IsoDateFormat;
                    options.SerializerSettings.DateParseHandling = DateParseHandling.DateTime;
                })
                .SetCompatibilityVersion(CompatibilityVersion.Version_2_1);

            services.AddApiVersioning();
            services.AddVersionedApiExplorer();

            foreach (var dependencyConfigurator in _dependencyConfigurators.OrderBy(o => o.Order))
                dependencyConfigurator.ConfigureServices(services);

            services
                .ConfigureHeadersForwarding()
                .ConfigureCors()
                .ConfigureIISIntegration()
                .ConfigureApiVersion()
                .ConfigureApiExplorer();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
        {

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseHsts();
                app.UseHttpsRedirection();
            }

            app.UseCors("BDRPCorsPolicy");
            app.UseStaticFiles();
            app.UseSecuryHeaders();
            app.UseApiVersioning();

            foreach (var dependencyConfigurator in _dependencyConfigurators.OrderBy(o => o.Order))
                dependencyConfigurator.Configure(app, env);

            // Enable middleware to serve generated Swagger as a JSON endpoint.
            app.UseSwagger();

            // Enable middleware to serve swagger-ui(HTML, JS, CSS, etc.), specifying the Swagger JSON endpoint.
            app.UseSwaggerUI(c =>
            {
                c.SwaggerEndpoint(Configuration["SwaggerSettings:EndPoint"], Configuration["SwaggerSettings:Name"]);
                c.DocExpansion(Swashbuckle.AspNetCore.SwaggerUI.DocExpansion.None);
            });

            app.UseMiddleware<VisionGetRequestHeaderHandlerMiddelWare>();
            app.UseMiddleware<VisionSetResponseHeaderHandlerMiddelWare>();
            app.UseMiddleware<VisionExceptionHandlerMiddelWare>();

            app.UseMvc();
        }
    }
}




using Microsoft.AspNetCore;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Serilog;
using System.Reflection;
using visionBDRP.Configuration;

namespace visionBDRP
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateWebHostBuilder(args).Build().Run();
        }

        public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>
            WebHost.CreateDefaultBuilder(args)
                .ConfigureAppConfiguration((buildContext, config) =>
                {
                    var env = buildContext.HostingEnvironment;

                    config.SetBasePath(env.ContentRootPath);
                    config.AddJsonFile("appsettings.json", false, true)
                        .AddJsonFile($"appsettings.{env.EnvironmentName}.json", false, true)
                        .AddEnvironmentVariables();

                    if (env.IsDevelopment())
                        config.AddUserSecrets(Assembly.GetExecutingAssembly());
                })
                .ConfigureServices((_, services) =>
                {
                    services.AddSingleton<ICustomStartup, VisionDependencyConfigurator>();
                    services.AddSingleton<ICustomStartup, SwaggerConfigurator>();
                })
                .UseKestrel(options => options.AddServerHeader = false)
                .UseIISIntegration()
                .UseStartup<Startup>()
                .UseSerilog((context, logger) => logger
                    .ReadFrom.Configuration(context.Configuration)
                    .Enrich.FromLogContext()
                    .MinimumLevel.Information());
    }
}


using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.HttpOverrides;
using Microsoft.AspNetCore.Mvc.ApiExplorer;
using Microsoft.AspNetCore.Mvc.Versioning;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using visionBDRP.ConfigurationOptions;

namespace visionBDRP.Extensions
{
    public static class ServiceExtensions
    {
        public static IServiceCollection ConfigureApiVersion(this IServiceCollection services)
        {
            services.AddSingleton<IConfigureOptions<ApiVersioningOptions>, ConfigureApiVersioningOptions>();

            return services;
        }

        public static IServiceCollection ConfigureApiExplorer(this IServiceCollection services)
        {
            services.AddSingleton<IConfigureOptions<ApiExplorerOptions>, ConfigureApiExplorerOptions>();

            return services;
        }

        public static IServiceCollection ConfigureCors(this IServiceCollection services)
        {
            services.AddCors(options =>
            {
                options.AddPolicy("BDRPCorsPolicy",
                    builder => builder.AllowAnyOrigin()
                        .AllowAnyOrigin()
                        .AllowAnyHeader()
                        .AllowCredentials());
            });

            return services;
        }

        public static IServiceCollection ConfigureIISIntegration(this IServiceCollection services)
        {
            services.Configure<IISOptions>(options =>
            {
                /* We use default values */
            });

            return services;
        }

        public static IServiceCollection ConfigureHeadersForwarding(this IServiceCollection services)
        {
            services.Configure<ForwardedHeadersOptions>(options =>
            {
                options.ForwardedHeaders = ForwardedHeaders.XForwardedFor | ForwardedHeaders.XForwardedProto;
            });

            return services;
        }

        public static IApplicationBuilder UseSecuryHeaders(this IApplicationBuilder app)
        {
            // <add name="X-Frame-Options" value="DENY" />
            app.UseXfo(options => options.Deny());

            //<add name="X-Xss-Protection" value="1; mode=block" />
            app.UseXXssProtection(options => options.EnabledWithBlockMode());

            // <add name="X-Content-Type-Options" value="nosniff" />
            app.UseXContentTypeOptions();

            //<add name="Referrer-Policy" value="no-referrer" />
            app.UseReferrerPolicy(options => options.NoReferrer());

            // <add name="X-Permitted-Cross-Domain-Policies" value="none" />
            // See web.config

            // <add name="Strict-Transport-Security" value="max-age=31536000; includeSubDomains" />
            app.UseHsts(hsts => hsts.MaxAge(365).IncludeSubdomains());

            // <add name="Feature-Policy" value="accelerometer 'none'; camera 'none'; geolocation 'none'; gyroscope 'none'; magnetometer 'none'; microphone 'none'; payment 'none'; usb 'none'" />
            // See web.config

            // < add name = "Content-Security-Policy" value = "default-src 'self'" />
            app.UseCsp(options => options
                .DefaultSources(s => s.Self())
                .BlockAllMixedContent()
                .ScriptSources(s => s.Self())
                .ImageSources(s => s.Self()));

            // Remove Server header
            // See Program

            // Avoid exposing MVC version.
            // See web.config

            return app;
        }
    }
}

using Newtonsoft.Json.Converters;

namespace visionBDRP.Extensions
{
    public sealed class LongDateTimeJsonConverter : IsoDateTimeConverter
    {
        public LongDateTimeJsonConverter()
        {
            DateTimeFormat = "yyyy'-'MM'-'ddTHH':'mm':'ss";
        }
    }
}

using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Routing;

namespace visionBDRP.Extensions
{
    public sealed class StringConstraint : IRouteConstraint
    {
        public bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection)
        {
            return values[routeKey] is string;
        }
    }
}


